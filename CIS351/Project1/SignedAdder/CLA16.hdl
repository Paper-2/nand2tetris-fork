// CLA16.hdl
// 16-bit carry look-ahead adder built from four 4-bit CLA blocks
// inputs: a[16], b[16], cin
// outputs: sum[16], cout

CHIP CLA16 {
    IN a[16], b[16], cin;
    OUT sum[16], carryout, overflow;   // carryout = unsigned overflow (Cout); overflow = signed overflow

    PARTS:
    // instantiate four CLA4 blocks, wiring slices 
    CLA4 (a=a[0..3],  b=b[0..3],  cin=cin, sum=sum[0..3],  cout=c1);        // delay 30
    CLA4 (a=a[4..7],  b=b[4..7],  cin=c1,  sum=sum[4..7],  cout=c2);        // delay 30
    CLA4 (a=a[8..11], b=b[8..11], cin=c2,  sum=sum[8..11], cout=c3);    // delay 30
    CLA4 (a=a[12..15],b=b[12..15],cin=c3,  sum=sum[12..15], cout=c4, c3i=cm);        // delay 30

    // Signed overflow detection: XOR of carry into MSB and carry out
    Xor(a=cm, b=c4, out=overflow);
    Or(a=c4, b=false, out=carryout); // carryout = c4
}